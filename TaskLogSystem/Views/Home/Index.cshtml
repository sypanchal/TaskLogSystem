@{
    ViewBag.Title = "Dashboard";
}

@using TaskLogSystem.Models

@{
    TaskLogSystemEntities _dbContext = new TaskLogSystemEntities();

    Employee user = null;
    if (Session["CurrentUser"] != null)
    {
        user = (Employee)Session["CurrentUser"];
    }
}

@{Html.RenderPartial("_Header"); }

@if (user.DepartmentID != 1)
{
    <div class="container-fluid">
        <div class="text-center">
            <h1><b>Task Log Entry</b></h1>
        </div>

        <button type="button"
                class="btn btn-primary btn-lg addTaskBtn float-end mx-5"
                data-bs-toggle="modal"
                data-bs-target="#modalId">
            Add Task
        </button>

        @{Html.RenderPartial("_TasksTable");}

        <div class="modal fade"
             id="modalId"
             tabindex="-1"
             data-bs-backdrop="static"
             data-bs-keyboard="false"
             role="dialog"
             aria-labelledby="modalTitleId"
             aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-md"
                 role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title" id="taskDetails">Task Details</h3>
                        <button type="button"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @{Html.RenderPartial("_TaskLogForm", new TaskLogSystem.Models.Task());}
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid">
        <div class="text-center">
            <h1><b>Employees List</b></h1>
        </div>

        <button type="button"
                class="btn btn-primary btn-lg addEmployeeBtn float-end mx-5"
                data-bs-toggle="modal"
                data-bs-target="#modalId">
            Add Employee
        </button>

        @{Html.RenderPartial("_EmployeesTable");}

        <div class="modal fade"
             id="modalId"
             tabindex="-1"
             data-bs-backdrop="static"
             data-bs-keyboard="false"
             role="dialog"
             aria-labelledby="modalTitleId"
             aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg"
                 role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title" id="taskDetails">Employee Details</h3>
                        <button type="button"
                                class="btn-close"
                                data-bs-dismiss="modal"
                                aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @{Html.RenderPartial("_EmployeeForm", new TaskLogSystem.Models.Employee());}
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section scripts {
    <script>
        ///////////////////////////////////////////////////////////////////////////////////////////
        // All Employee table for director
        var EmployeeTable = $("#EmployeeTable").DataTable({
            "processing": true,
            "serverSide": true,
            "filter": true,
            "orderMulti": false,
            "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],

            "columnDefs": [
                {
                    "targets": [0, 7],
                    "orderable": false
                },
            ],

            "pagingType": "simple_numbers",
            "language": {
                "loadingRecords": "Loading data, please wait...",
                "zeroRecords": "No data available",
                paginate: {
                    next: '<i class="fa fa-chevron-right" aria-hidden="true"></i>',
                    previous: '<i class="fa fa-chevron-left" aria-hidden="true"></i>'
                }
            },

            "ajax": {
                "url": "/Datatable/LoadEmployeesData",
                "type": "POST",
                "datatype": "json"
            },

            "columns": [
                {
                    "data": null,
                    "title": "",
                    "render": function (data, type, row) {
                        return '<td>' +
                            '<div class="d-flex justify-content-center align-items-center" style="gap: 1rem;"><button type="button" class="btn btn-info showEmployeeBtn" data-id="' + row.EmployeeID + '">Show</button>' +
                            '</div>' +
                            '</td>';
                    }
                },
                {
                    "data": "EmployeeCode",
                    "name": "EmployeeCode",
                    "title": "Employee Code",
                    "autoWidth": true
                },
                {
                    "data": "EmployeeName",
                    "name": "EmployeeName",
                    "title": "Employee Name",
                    "autoWidth": true
                },
                {
                    "data": "Gender",
                    "name": "Gender",
                    "title": "Gender",
                    "autoWidth": true
                },
                {
                    "data": "Email",
                    "name": "Email",
                    "title": "Email",
                    "autoWidth": true
                },
                {
                    "data": "DepartmentName",
                    "name": "DepartmentName",
                    "title": "Department",
                    "autoWidth": true
                },
                {
                    "data": "ReportingPersonName",
                    "name": "ReportingPersonName",
                    "title": "Reporting Person",
                    "autoWidth": true
                },
                {
                    "data": null,
                    "title": "Actions",
                    "autoWidth": true,
                    "render": function (data, type, row) {
                        return '<td>' +
                            '<div class="d-flex justify-content-center align-items-center" style="gap: 1rem;"><button type="button" class="btn btn-primary editEmployeeBtn" data-id="' + row.EmployeeID + '" data-bs-toggle="modal" data-bs-target="#modalId">Edit</button>' +
                            '<button type="button" class="btn btn-danger deleteEmployeeBtn" data-id="' + row.EmployeeID + '">Delete</button></div>' +
                            '</td>';
                    }
                },
            ]
        });

        // Child table for each employee to show his/her tasks
        EmployeeTable.on("click", ".showEmployeeBtn", function (e) {
            e.preventDefault();

            let tr = $(this).closest("tr");
            let row = EmployeeTable.row(tr);
            let EmployeeID = row.data().EmployeeID;

            if (row.child.isShown()) {
                $(this).html("Show");
                row.child.hide();
            } else {
                $(this).html("Hide");
                let childTable = $(`
                        <table class="table table-bordered table-responsive" id="childTable">
                            <thead>
                                <tr>
                                    <th>Task Name</th>
                                    <th>Task Description</th>
                                    <th>Task Date</th>
                                    <th>Approver</th>
                                    <th>Approved or Rejected By</th>
                                    <th>Approved or Rejected On</th>
                                    <th>Status</th>
                                    <th>Created On</th>
                                    <th>Modified On</th>
                                </tr>
                            </thead>
                        </table>
                    `)

                row.child(childTable).show();

                childTable.DataTable({
                    "processing": true,
                    "serverSide": true,
                    "filter": true,
                    "searching": true,
                    "orderMulti": false,
                    "lengthMenu": [[5, 10, 20, -1], [5, 10, 20, "All"]],

                    "order": [8, "desc"],
                    "pagingType": "simple_numbers",
                    "language": {
                        "loadingRecords": "Loading data, please wait...",
                        "zeroRecords": "No data available",
                        paginate: {
                            next: '<i class="fa fa-chevron-right" aria-hidden="true"></i>',
                            previous: '<i class="fa fa-chevron-left" aria-hidden="true"></i>'
                        }
                    },

                    "ajax": {
                        "url": "/Datatable/LoadEmployeeTaskData",
                        data: { EmployeeID },
                        "type": "POST",
                        "datatype": "json"
                    },

                    "columnDefs": [
                        {
                            "targets": [6, 9],
                            "orderable": false,
                        },
                        {
                            "targets": [0, 2, 3, 4],
                            "width": "200px",
                        },
                        {
                            "targets": [5, 7, 8],
                            "width": "150px",
                        },
                    ],

                    "columns": [
                        {
                            "data": "TaskName",
                            "name": "TaskName",
                            "title": "Task Name",
                        },
                        {
                            "data": "TaskDescription",
                            "name": "TaskDescription",
                            "title": "Task Description",
                        },
                        {
                            "data": "TaskDate",
                            "name": "TaskDate",
                            "title": "Task Date",
                        },
                        {
                            "data": "ApproverName",
                            "name": "ApproverName",
                            "title": "Approver",
                        },
                        {
                            "data": "ApprovedorRejectedByName",
                            "name": "ApprovedorRejectedByName",
                            "title": "Approved or Rejected By",
                        },
                        {
                            "data": "ApprovedorRejectedOn",
                            "name": "ApprovedorRejectedOn",
                            "title": "Approved or Rejected On",
                        },
                        {
                            "data": "Status",
                            "name": "Status",
                            "title": "Status",
                            "render": function (data, type, row) {
                                if (type === 'display' || type === 'filter') {
                                    var className = '';
                                    if (data === 'Approved') {
                                        className = 'bg-success text-white p-2 w-100 text-center rounded';
                                    } else if (data === 'Rejected') {
                                        className = 'bg-danger text-white p-2 w-100 text-center rounded';
                                    } else if (data === 'Pending') {
                                        className = 'bg-warning text-black p-2 w-100 text-center rounded';
                                    }
                                    return '<div class="d-flex justify-content-center "><span class="' + className + '">' + data + '</span></div>';
                                }
                                return data;
                            }
                        },
                        {
                            "data": "CreatedOn",
                            "name": "CreatedOn",
                            "title": "Created On",
                        },
                        {
                            "data": "ModifiedOn",
                            "name": "ModifiedOn",
                            "title": "Modified On",
                        },
                    ],
                });
            }
        });

        // Task table for employees and manager
        var TaskTable = $("#TaskTable").DataTable({
            "processing": true,
            "serverSide": true,
            "filter": true,
            "orderMulti": false,
            //"lengthMenu": [5, 10, 20, { label: 'All', value: -1 }],
            "lengthMenu": [[5, 10, 20, 50, -1], [5, 10, 20, 50, "All"]],

            "order": [8, "desc"],

            "columnDefs": [
                {
                    "targets": [9],
                    "orderable": false
                },
                {
                    "targets": [0, 2, 3, 4, 5, 6, 7, 8, 9],
                    "width": "160px",
                },
            ],

            "pagingType": "simple_numbers",
            "language": {
                "loadingRecords": "Loading data, please wait...",
                "zeroRecords": "No data available",
                paginate: {
                    next: '<i class="fa fa-chevron-right" aria-hidden="true"></i>',
                    previous: '<i class="fa fa-chevron-left" aria-hidden="true"></i>'
                }
            },

            "ajax": {
                "url": "/Datatable/LoadTasksData",
                "type": "POST"
            },

            "columns": [
                {
                    "data": "TaskName",
                    "name": "TaskName",
                    "title": "Task Name",
                    "autoWidth": true
                },
                {
                    "data": "TaskDescription",
                    "name": "TaskDescription",
                    "title": "Task Description",
                    "autoWidth": true
                },
                {
                    "data": "TaskDate",
                    "name": "TaskDate",
                    "title": "Task Date",
                    "autoWidth": true
                },
                {
                    "data": "ApproverName",
                    "name": "ApproverName",
                    "title": "Approver",
                    "autoWidth": true
                },
                {
                    "data": "ApprovedorRejectedByName",
                    "name": "ApprovedorRejectedByName",
                    "title": "Approved or Rejected By",
                    "autoWidth": true
                },
                {
                    "data": "ApprovedorRejectedOn",
                    "name": "ApprovedorRejectedOn",
                    "title": "Approved or Rejected On",
                    "autoWidth": true
                },
                {
                    "data": "Status",
                    "name": "Status",
                    "title": "Status",
                    "autoWidth": true,
                    "render": function (data, type, row) {
                        if (type === 'display' || type === 'filter') {
                            var className = '';
                            if (data === 'Approved') {
                                className = 'bg-success text-white p-2 w-100 text-center rounded';
                            } else if (data === 'Rejected') {
                                className = 'bg-danger text-white p-2 w-100 text-center rounded';
                            } else if (data === 'Pending') {
                                className = 'bg-warning text-black p-2 w-100 text-center rounded';
                            }
                            return '<div class="d-flex justify-content-center "><span class="' + className + '">' + data + '</span></div>';
                        }
                        return data;
                    }
                },
                {
                    "data": "CreatedOn",
                    "name": "CreatedOn",
                    "title": "Created On",
                    "autoWidth": true
                },
                {
                    "data": "ModifiedOn",
                    "name": "ModifiedOn",
                    "title": "Modified On",
                    "autoWidth": true
                },
                {
                    "data": null,
                    "title": "Actions",
                    "autoWidth": true,
                    "render": function (data, type, row) {
                        if (row.Status == "Pending") {
                            return '<td>' +
                                '<div class="d-flex justify-content-center align-items-center" style="gap: 1rem;"><button type="button" class="btn btn-primary editTaskBtn" data-id="' + row.TaskID + '" data-bs-toggle="modal" data-bs-target="#modalId">Edit</button>' +
                                '<button type="button" class="btn btn-danger deleteTaskBtn" data-id="' + row.TaskID + '">Delete</button></div>' +
                                '</td>';
                        } else {
                            return '<td>This Task is ' + row.Status + '</td>';
                        }
                    }
                },
            ]
        });

        ///////////////////////////////////////////////////////////////////////////////////////////
        // Task Form Reset
        $(document).on("click", ".addTaskBtn", function () {
            var url = "/Task/Create";

            $.ajax({
                url: url,
                type: "GET",
                success: function (data) {
                    $("#modalId .modal-body").html(data);
                },
                error: function () {
                    console.error("An error occurred while fetching actor details.");
                }
            });
        });

        // Edit Task
        $(document).on("click", ".editTaskBtn", function () {
            var taskID = $(this).data("id");
            var url = "/Task/Edit/" + taskID;

            $.ajax({
                url: url,
                type: "GET",
                success: function (data) {
                    $("#modalId .modal-body").html(data);
                },
                error: function () {
                    console.error("An error occurred while fetching actor details.");
                }
            });
        });

        // Delete Task (SweetAlert Popup)
        $(document).on("click", ".deleteTaskBtn", function () {
            var taskID = $(this).data("id");
            var url = "/Task/Delete/" + taskID;

            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: url,
                        type: "POST",
                        datatype: 'json',
                        data: { id: taskID },
                        success: function (data) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "Task has been deleted.",
                                icon: "success"
                            }).then((result) => {
                                TaskTable.ajax.url("/Datatable/LoadTasksData").load();
                            });
                        },
                        error: function () {
                            console.error("An error occurred while deleting Task details.");
                        }
                    });
                }
            });
        });

        // Submit Task Form
        $(document).on("submit", "#TaskLogForm", function (e) {
            e.preventDefault();

            var formData = new FormData(this);
            var url = "/Task/UpsertTask";

            $.ajax({
                url: url,
                type: "POST",
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        TaskTable.ajax.url("/Datatable/LoadTasksData").load();
                        $("#modalId").modal('hide');
                    } else {
                        $("#modalId .modal-body").html(response);
                    }
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.error("An error occurred while creating actor.");
                }
            });
        });

        ///////////////////////////////////////////////////////////////////////////////////////////
        // Employee Form Reset
        $(document).on("click", ".addEmployeeBtn", function () {
            var url = "/Employees/Create";

            $.ajax({
                url: url,
                type: "GET",
                success: function (data) {
                    $("#modalId .modal-body").html(data);
                },
                error: function () {
                    console.error("An error occurred while fetching actor details.");
                }
            });
        });

        //Edit Employee
        $(document).on("click", ".editEmployeeBtn", function () {
            var empID = $(this).data("id");
            var url = "/Employees/Edit/" + empID;

            $.ajax({
                url: url,
                type: "GET",
                success: function (data) {
                    $("#modalId .modal-body").html(data);
                },
                error: function () {
                    console.error("An error occurred while fetching actor details.");
                }
            });
        });

        // Delete Employee
        $(document).on("click", ".deleteEmployeeBtn", function () {
            var empID = $(this).data("id");
            var url = "/Employees/Delete/" + empID;

            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: url,
                        type: "POST",
                        datatype: 'json',
                        data: { id: empID },
                        success: function (data) {
                            Swal.fire({
                                title: "Deleted!",
                                text: "Employee has been deleted successfully.",
                                icon: "success"
                            }).then((result) => {
                                EmployeeTable.ajax.url("/Datatable/LoadEmployeesData").load();
                            });
                        },
                        error: function () {
                            console.error("An error occurred while deleting Task details.");
                        }
                    });
                }
            });
        });

        // On edit employee
        if (document.getElementById("DepartmentID")) {
            var empID = $('#EmployeeID').val();
            var deptID = $('#DepartmentID').val(); // Get the selected department ID
            var url = "/Employees/GetReportingPersonsListOnChange";

            $.ajax({
                url,
                type: 'GET',
                data: { DepartmentID: deptID, EmployeeID: empID }, // Pass the selected department ID
                success: function (data) {
                    // Clear existing options
                    $('#ReportingPerson').empty();

                    // Append new options based on the received data
                    $.each(data, function (index, item) {
                        $('#ReportingPerson').append($('<option>', {
                            value: item.Value,
                            text: item.Text
                        }));
                    });
                },
                error: function (xhr, status, error) {
                    // Handle error
                    console.log(xhr.responseText);
                }
            });
        }

        // On change Department
        $(document).on("change", "#DepartmentID", function () {
            var empID = $('#EmployeeID').val();
            var deptID = $(this).val(); // Get the selected department ID
            var url = "/Employees/GetReportingPersonsListOnChange";

            $.ajax({
                url,
                type: 'GET',
                data: { DepartmentID: deptID, EmployeeID: empID }, // Pass the selected department ID
                success: function (data) {
                    // Clear existing options
                    $('#ReportingPerson').empty();

                    // Append new options based on the received data
                    $.each(data, function (index, item) {
                        $('#ReportingPerson').append($('<option>', {
                            value: item.Value,
                            text: item.Text
                        }));
                    });
                },
                error: function (xhr, status, error) {
                    // Handle error
                    console.log(xhr.responseText);
                }
            });
        });
    </script>
}
